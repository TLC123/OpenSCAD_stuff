Mix=0.5;//[-0.5:0.01:1.5];
Mutate=0;//[0:0.01:0.5];
Parent1= [[[9.999, 9.999, 9.999], [0, -89.999, 0], [0, 0, 0], [0.149, 0.949, 0.749], [[0, -0.017, 0.999], [0, -0.515, 0.857], [0, -0.874, 0.484], [0, -0.999, -0.017], [0, -0.857, -0.515], [0, -0.484, -0.874], [0, 0.017, -0.999], [0, 0.515, -0.857], [0, 0.874, -0.484], [0, 0.999, 0.017], [0, 0.857, 0.515], [0, 0.484, 0.874]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.999, [[0.999, 5.999, 5.999], [0, -89.999, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[0.031, 0.308, 0.981], [0.079, 0.678, 0.675], [0.063, 1.024, 0.55], [0.078, 0.961, -0.422], [-0.108, 0.726, -0.51], [0.003, 0.331, -0.712], [0.003, -0.331, -0.712], [-0.108, -0.726, -0.51], [0.078, -0.961, -0.422], [0.063, -1.024, 0.55], [0.079, -0.678, 0.675], [0.031, -0.308, 0.981]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.231, [[1.187, 2.112, 1.368], [4.348, 252.4, 129.059], [92.695, 0.628, 0.706], [0.149, 0.65, 0.749], [[0.003, 0.319, 1.037], [-0.077, 0.809, 0.587], [0.007, 0.756, -0.346], [0.111, 0.227, -1.023], [0.111, -0.227, -1.023], [0.007, -0.756, -0.346], [-0.077, -0.809, 0.587], [0.003, -0.319, 1.037]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.216, [[1.673, 1.944, 1.949], [0, 4.548, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.1, 0.396, 0.897], [0.042, 0.846, 0.623], [0.034, 0.891, -0.561], [-0.051, 0.414, -0.997], [-0.051, -0.414, -0.997], [0.034, -0.891, -0.561], [0.042, -0.846, 0.623], [0.1, -0.396, 0.897]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.167, [[5.702, 1.322, 1.449], [0, -0.118, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.033, 0.442, 1.144], [0.004, 0.887, 0.727], [-0.012, 0.805, -0.671], [-0.02, 0.312, -1.125], [-0.02, -0.312, -1.125], [-0.012, -0.805, -0.671], [0.004, -0.887, 0.727], [-0.033, -0.442, 1.144]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.234, [[1.274, 1.925, 1.792], [0, -4.659, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.125, 0.235, 1.01], [0.03, 0.906, 0.583], [0.029, 0.955, -0.116], [0.071, 0.306, -1.012], [0.071, -0.306, -1.012], [0.029, -0.955, -0.116], [0.03, -0.906, 0.583], [0.125, -0.235, 1.01]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.225, [[5.37, 1.796, 1.311], [0, -0.565, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.018, 0.288, 0.723], [0.186, 0.944, 0.518], [-0.156, 0.8, -0.395], [-0.037, 0.362, -0.606], [-0.037, -0.362, -0.606], [-0.156, -0.8, -0.395], [0.186, -0.944, 0.518], [0.018, -0.288, 0.723]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.269, [[1.166, 1.83, 1.566], [0, 0.47, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.02, 0.389, 0.674], [0.094, 0.903, 0.501], [0.098, 0.899, -0.062], [-0.056, 0.419, -0.655], [-0.056, -0.419, -0.655], [0.098, -0.899, -0.062], [0.094, -0.903, 0.501], [-0.02, -0.389, 0.674]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.417, [[0.549, 2.262, 1.729], [0, 0.837, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.013, 0.345, 1.04], [-0.061, 0.773, 0.14], [0.009, 0.829, -0.196], [-0.146, 0.398, -0.9], [-0.146, -0.398, -0.9], [0.009, -0.829, -0.196], [-0.061, -0.773, 0.14], [-0.013, -0.345, 1.04]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.056, [[15.132, 10.79, 8.78], [0, 6.494, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[-0.072, 0.158, 1.069], [-0.003, 0.766, 0.856], [0.034, 1.047, 0.499], [-0.017, 0.846, -0.394], [-0.043, 0.607, -0.765], [-0.134, 0.15, -0.723], [-0.134, -0.15, -0.723], [-0.043, -0.607, -0.765], [-0.017, -0.846, -0.394], [0.034, -1.047, 0.499], [-0.003, -0.766, 0.856], [-0.072, -0.158, 1.069]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.326, [[3.268, 2.307, 0.705], [8.485, 255.368, 98.316], [99.999, 0, 0], [0.149, 0.65, 0.749], [[0.079, 0.268, 0.694], [0.005, 0.869, 0.318], [0.032, 1.03, -0.316], [-0.066, 0.286, -0.741], [-0.066, -0.286, -0.741], [0.032, -1.03, -0.316], [0.005, -0.869, 0.318], [0.079, -0.268, 0.694]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[3.268, 2.96, 1.98], [0, 4.902, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.006, 0.484, 0.739], [-0.007, 0.994, 0.318], [0.18, 0.768, -0.257], [-0.079, 0.371, -1.236], [-0.079, -0.371, -1.236], [0.18, -0.768, -0.257], [-0.007, -0.994, 0.318], [-0.006, -0.484, 0.739]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[1.634, 3.941, 1.653], [0, -4.902, 0], [6.999, 7.999, 8.999], [0.182, 0.764, 0.749], [[0.011, 0.405, 1.098], [-0.011, 0.841, 0.442], [-0.039, 0.98, -0.397], [-0.072, 0.303, -0.947], [-0.072, -0.303, -0.947], [-0.039, -0.98, -0.397], [-0.011, -0.841, 0.442], [0.011, -0.405, 1.098]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[2.287, 2.307, 1.653], [0, -17.974, 0], [6.999, 7.999, 8.999], [0.182, 0.764, 0.749], [[-0.006, 0.39, 0.961], [0.019, 0.898, 0.312], [-0.079, 0.77, -0.035], [0.024, 0.407, -0.77], [0.024, -0.407, -0.77], [-0.079, -0.77, -0.035], [0.019, -0.898, 0.312], [-0.006, -0.39, 0.961]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[1.634, 3.941, 1.653], [0, -11.438, 0], [6.999, 7.999, 8.999], [0.182, 0.764, 0.749], [[-0.079, 0.385, 0.811], [-0.044, 0.813, 0.656], [0.05, 0.754, -0.629], [-0.056, 0.471, -1.086], [-0.056, -0.471, -1.086], [0.05, -0.754, -0.629], [-0.044, -0.813, 0.656], [-0.079, -0.385, 0.811]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[1.307, 2.307, 1.653], [0, -8.17, 0], [6.999, 7.999, 8.999], [0.182, 0.764, 0.749], [[-0.102, 0.527, 1.083], [-0.125, 1.08, 0.577], [0.213, 0.825, -0.208], [-0.038, 0.302, -0.475], [-0.038, -0.302, -0.475], [0.213, -0.825, -0.208], [-0.125, -1.08, 0.577], [-0.102, -0.527, 1.083]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.326, [[0.326, 2.705, 1.864], [0, -5.555, 0], [6.999, 7.999, 8.999], [0.149, 0.748, 0.749], [[0.098, 0.463, 1.001], [-0.026, 1.024, 0.467], [-0.013, 0.821, -0.24], [0.017, 0.359, -0.91], [0.017, -0.359, -0.91], [-0.013, -0.821, -0.24], [-0.026, -1.024, 0.467], [0.098, -0.463, 1.001]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.148, [[9.885, 16.212, 15.791], [0, 14.774, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[-0.078, 0.298, 0.793], [-0.03, 0.629, 0.714], [0.077, 0.965, 0.451], [0.003, 1.023, -0.173], [0.046, 0.712, -0.51], [0.018, 0.227, -1.283], [0.018, -0.227, -1.283], [0.046, -0.712, -0.51], [0.003, -1.023, -0.173], [0.077, -0.965, 0.451], [-0.03, -0.629, 0.714], [-0.078, -0.298, 0.793]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.431, [[4.318, 2.727, 0.611], [-7.218, 243.417, 105.116], [99.999, 0, 0], [0.149, 0.65, 0.749], [[-0.115, 0.431, 0.807], [0.108, 0.886, 0.429], [0.158, 0.731, -0.28], [0.003, 0.352, -0.897], [0.003, -0.352, -0.897], [0.158, -0.731, -0.28], [0.108, -0.886, 0.429], [-0.115, -0.431, 0.807]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[4.318, 3.59, 2.295], [0, 6.477, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.03, 0.439, 0.953], [0, 0.931, 0.517], [-0.048, 0.79, -0.752], [-0.068, 0.366, -1.28], [-0.068, -0.366, -1.28], [-0.048, -0.79, -0.752], [0, -0.931, 0.517], [-0.03, -0.439, 0.953]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[2.159, 4.886, 1.863], [0, -6.477, 0], [6.999, 7.999, 8.999], [0.193, 0.801, 0.749], [[-0.153, 0.359, 0.985], [0.084, 0.939, 0.435], [-0.033, 0.962, -0.594], [-0.026, 0.34, -0.893], [-0.026, -0.34, -0.893], [-0.033, -0.962, -0.594], [0.084, -0.939, 0.435], [-0.153, -0.359, 0.985]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[3.022, 2.727, 1.863], [0, -23.75, 0], [6.999, 7.999, 8.999], [0.193, 0.801, 0.749], [[-0.068, 0.556, 0.758], [0.042, 0.883, 0.242], [-0.052, 0.945, -0.318], [0.024, 0.371, -0.775], [0.024, -0.371, -0.775], [-0.052, -0.945, -0.318], [0.042, -0.883, 0.242], [-0.068, -0.556, 0.758]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[2.159, 4.886, 1.863], [0, -15.114, 0], [6.999, 7.999, 8.999], [0.193, 0.801, 0.749], [[-0.069, 0.33, 1.038], [-0.036, 0.94, 0.213], [0.014, 0.991, -0.129], [0.161, 0.319, -0.909], [0.161, -0.319, -0.909], [0.014, -0.991, -0.129], [-0.036, -0.94, 0.213], [-0.069, -0.33, 1.038]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[1.727, 2.727, 1.863], [0, -10.795, 0], [6.999, 7.999, 8.999], [0.193, 0.801, 0.749], [[-0.064, 0.298, 0.972], [-0.018, 0.947, 0.224], [-0.028, 0.919, -0.369], [-0.028, 0.376, -1.162], [-0.028, -0.376, -1.162], [-0.028, -0.919, -0.369], [-0.018, -0.947, 0.224], [-0.064, -0.298, 0.972]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.431, [[0.431, 2.499, 0.856], [0, -7.341, 0], [6.999, 7.999, 8.999], [0.149, 0.779, 0.749], [[-0.103, 0.506, 0.999], [-0.108, 0.865, 0.471], [0.047, 0.948, -0.609], [-0.12, 0.324, -1.146], [-0.12, -0.324, -1.146], [0.047, -0.948, -0.609], [-0.108, -0.865, 0.471], [-0.103, -0.506, 0.999]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.316, [[16.07, 21.183, 11.988], [0, 10.187, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[0.01, 0.249, 0.719], [0.052, 0.822, 0.85], [0.029, 0.907, 0.221], [-0.096, 1.039, -0.404], [-0.082, 0.661, -0.77], [-0.114, 0.229, -1.076], [-0.114, -0.229, -1.076], [-0.082, -0.661, -0.77], [-0.096, -1.039, -0.404], [0.029, -0.907, 0.221], [0.052, -0.822, 0.85], [0.01, -0.249, 0.719]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.749, [[7.66, 4.108, 2.023], [0.452, 223.259, 103.005], [89.818, 0.875, 0.985], [0.149, 0.65, 0.749], [[-0.071, 0.283, 1.075], [0.083, 0.905, 0.406], [0.017, 0.864, -0.562], [0.044, 0.423, -0.727], [0.044, -0.423, -0.727], [0.017, -0.864, -0.562], [0.083, -0.905, 0.406], [-0.071, -0.283, 1.075]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.778, [[8.694, 3.896, 2.514], [0, 24.333, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.018, 0.393, 1.137], [0.083, 0.892, 0.246], [0.074, 0.939, -0.444], [0.052, 0.423, -0.887], [0.052, -0.423, -0.887], [0.074, -0.939, -0.444], [0.083, -0.892, 0.246], [-0.018, -0.393, 1.137]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.807, [[24.109, 4.735, 2.817], [0, 2.904, 0], [6.999, 7.999, 8.999], [0.178, 0.748, 0.749], [[0.053, 0.391, 1.143], [-0.059, 0.959, 0.368], [0.059, 0.88, -0.011], [0.037, 0.373, -1], [0.037, -0.373, -1], [0.059, -0.88, -0.011], [-0.059, -0.959, 0.368], [0.053, -0.391, 1.143]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.751, [[4.479, 3.208, 2.87], [0, -27.879, 0], [6.999, 7.999, 8.999], [0.178, 0.748, 0.749], [[0.083, 0.399, 0.656], [0.077, 1.059, 0.247], [-0.03, 0.871, -0.175], [0.103, 0.26, -1.05], [0.103, -0.26, -1.05], [-0.03, -0.871, -0.175], [0.077, -1.059, 0.247], [0.083, -0.399, 0.656]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.8, [[23.413, 4.296, 3.194], [0, -21.719, 0], [6.999, 7.999, 8.999], [0.178, 0.748, 0.749], [[-0.13, 0.37, 0.74], [-0.049, 0.874, 0.291], [-0.02, 0.927, -0.521], [0.095, 0.476, -1.064], [0.095, -0.476, -1.064], [-0.02, -0.927, -0.521], [-0.049, -0.874, 0.291], [-0.13, -0.37, 0.74]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.182, [[5.541, 5.561, 2.086], [0, 10.334, 0], [6.999, 7.999, 8.999], [0.178, 0.748, 0.749], [[0.037, 0.404, 0.87], [0.102, 1.029, 0.149], [0.033, 0.928, -0.363], [0.093, 0.403, -1.021], [0.093, -0.403, -1.021], [0.033, -0.928, -0.363], [0.102, -1.029, 0.149], [0.037, -0.404, 0.87]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.301, [[2.29, 1.994, 0.983], [0, -11.589, 0], [6.999, 7.999, 8.999], [0.149, 0.734, 0.749], [[0.053, 0.293, 0.969], [0.064, 1.042, 0.398], [-0.004, 0.94, -0.589], [0.058, 0.369, -0.87], [0.058, -0.369, -0.87], [-0.004, -0.94, -0.589], [0.064, -1.042, 0.398], [0.053, -0.293, 0.969]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.279, [[8.724, 31.881, 33.155], [0, 19.857, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[0.01, 0.333, 0.865], [-0.033, 0.723, 0.952], [-0.003, 0.881, 0.315], [0.02, 1.02, -0.297], [0.097, 0.707, -0.485], [-0.034, 0.124, -0.83], [-0.034, -0.124, -0.83], [0.097, -0.707, -0.485], [0.02, -1.02, -0.297], [-0.003, -0.881, 0.315], [-0.033, -0.723, 0.952], [0.01, -0.333, 0.865]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.999, [[6.03, 4.999, 4.381], [25.092, 195.778, 120.257], [99.999, 0, 0], [0.149, 0.65, 0.749], [[-0.047, 0.338, 0.765], [0.005, 0.73, 0.234], [-0.008, 0.658, -0.293], [0.015, 0.289, -0.628], [0.015, -0.289, -0.628], [-0.008, -0.658, -0.293], [0.005, -0.73, 0.234], [-0.047, -0.338, 0.765]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.524, [[20.243, 3.842, 2.793], [0, 35.154, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.033, 0.32, 0.625], [0.009, 0.71, 0.324], [0.022, 0.659, -0.337], [0.033, 0.301, -0.803], [0.033, -0.301, -0.803], [0.022, -0.659, -0.337], [0.009, -0.71, 0.324], [0.033, -0.32, 0.625]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.524, [[30.315, 3.573, 1.999], [0, 34.999, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.013, 0.326, 0.679], [0.031, 0.725, 0.233], [0.02, 0.71, -0.325], [-0.042, 0.268, -0.779], [-0.042, -0.268, -0.779], [0.02, -0.71, -0.325], [0.031, -0.725, 0.233], [-0.013, -0.326, 0.679]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.524, [[18.181, 2.524, 1.999], [0, -18.775, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.005, 0.326, 0.75], [0.033, 0.715, 0.279], [-0.042, 0.748, -0.393], [0.028, 0.296, -0.747], [0.028, -0.296, -0.747], [-0.042, -0.748, -0.393], [0.033, -0.715, 0.279], [-0.005, -0.326, 0.75]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.842, [[22.377, 1.999, 1.999], [0, -38.575, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.013, 0.259, 0.778], [0.031, 0.699, 0.265], [0.015, 0.679, -0.403], [0.006, 0.333, -0.68], [0.006, -0.333, -0.68], [0.015, -0.679, -0.403], [0.031, -0.699, 0.265], [-0.013, -0.259, 0.778]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [4.248, [[12.861, 2.53, 2.254], [0, -20.746, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.006, 0.271, 0.695], [0.033, 0.669, 0.179], [-0.029, 0.725, -0.314], [0.018, 0.285, -0.774], [0.018, -0.285, -0.774], [-0.029, -0.725, -0.314], [0.033, -0.669, 0.179], [0.006, -0.271, 0.695]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [3.842, [[4.999, 1.313, 1.043], [0, -9.061, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.025, 0.271, 0.745], [-0.047, 0.67, 0.269], [-0.004, 0.718, -0.287], [-0.008, 0.295, -0.64], [-0.008, -0.295, -0.64], [-0.004, -0.718, -0.287], [-0.047, -0.67, 0.269], [0.025, -0.271, 0.745]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.888, [[7.382, 14.958, 18.392], [0, 34.423, 0], [6.999, 7.999, 8.999], [0.249, 0.999, 0.749], [[0.016, 0.283, 0.76], [-0.003, 0.639, 0.455], [0.103, 0.922, 0.03], [0.016, 0.916, -0.234], [-0.054, 0.581, -0.874], [-0.004, 0.149, -0.847], [-0.004, -0.149, -0.847], [-0.054, -0.581, -0.874], [0.016, -0.916, -0.234], [0.103, -0.922, 0.03], [-0.003, -0.639, 0.455], [0.016, -0.283, 0.76]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.999, [[0.999, 0.1, 0.1], [-80.304, 181.372, 22.7], [0, 0, 0], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[1.1, 0.999, 0.999], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[3.038, 7.977, 7.977], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[4.855, 12.61, 12.61], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[4.855, 12.61, 12.61], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[3.038, 8.977, 8.977], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.999, [[0.1, 0.1, 0.1], [0, 0, 0], [6.999, 7.999, 8.999], [0, 0.999, 0.999], [[0, 0.382, 0.923], [0, 0.923, 0.382], [0, 0.923, -0.382], [0, 0.382, -0.923], [0, -0.382, -0.923], [0, -0.923, -0.382], [0, -0.923, 0.382], [0, -0.382, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.501, [[6.392, 3.657, 3.661], [0, 21.004, 0], [6.999, 7.999, 8.999], [0.202, 0.834, 0.749], [[-0.072, 0.231, 0.928], [-0.022, 0.768, 0.959], [-0.016, 0.918, 0.095], [-0.017, 1.053, -0.13], [-0.153, 0.687, -0.507], [-0.096, 0.383, -1.032], [-0.096, -0.383, -1.032], [-0.153, -0.687, -0.507], [-0.017, -1.053, -0.13], [-0.016, -0.918, 0.095], [-0.022, -0.768, 0.959], [-0.072, -0.231, 0.928]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.526, [[0.526, 0.527, 0.527], [-33.17, 192.188, 67.149], [47.31, 0, 0], [0.07, 0.834, 0.881], [[-0.097, 0.454, 0.87], [0.056, 0.885, 0.529], [-0.019, 0.989, -0.184], [-0.02, 0.352, -0.895], [-0.02, -0.352, -0.895], [-0.019, -0.989, -0.184], [0.056, -0.885, 0.529], [-0.097, -0.454, 0.87]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.526, [[0.559, 1.2, 1.2], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[0.013, 0.427, 0.872], [-0.063, 0.902, 0.372], [-0.039, 0.905, -0.289], [-0.026, 0.327, -0.772], [-0.026, -0.327, -0.772], [-0.039, -0.905, -0.289], [-0.063, -0.902, 0.372], [0.013, -0.427, 0.872]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.526, [[1.601, 7.88, 7.88], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[0.047, 0.376, 0.693], [-0.014, 0.92, 0.318], [-0.042, 0.957, -0.455], [0.101, 0.383, -1.027], [0.101, -0.383, -1.027], [-0.042, -0.957, -0.455], [-0.014, -0.92, 0.318], [0.047, -0.376, 0.693]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.426, [[2.558, 12.182, 12.182], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[0.019, 0.472, 1.035], [0.019, 0.864, 0.286], [0.054, 0.995, -0.38], [0.021, 0.462, -1.022], [0.021, -0.462, -1.022], [0.054, -0.995, -0.38], [0.019, -0.864, 0.286], [0.019, -0.472, 1.035]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.426, [[2.558, 12.182, 12.182], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[-0.036, 0.407, 0.96], [-0.052, 0.947, 0.42], [-0.047, 0.883, -0.408], [-0.06, 0.483, -0.908], [-0.06, -0.483, -0.908], [-0.047, -0.883, -0.408], [-0.052, -0.947, 0.42], [-0.036, -0.407, 0.96]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.526, [[1.601, 8.809, 8.809], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[-0.054, 0.361, 0.836], [-0.01, 0.971, 0.356], [0.056, 1.021, -0.272], [-0.006, 0.291, -0.917], [-0.006, -0.291, -0.917], [0.056, -1.021, -0.272], [-0.01, -0.971, 0.356], [-0.054, -0.361, 0.836]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.526, [[0.052, 0.745, 0.885], [0, 0, 0], [6.999, 7.999, 8.999], [0.07, 0.834, 0.881], [[0.012, 0.332, 0.749], [0.015, 0.843, 0.348], [-0.033, 0.907, -0.577], [-0.084, 0.33, -0.964], [-0.084, -0.33, -0.964], [-0.033, -0.907, -0.577], [0.015, -0.843, 0.348], [0.012, -0.332, 0.749]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]]], [[2.367, [[2.154, 5.999, 5.999], [0, -89.999, 0], [6.999, 7.999, 8.999], [0.22, 0.896, 0.749], [[0.044, 0.151, 1.332], [-0.048, 0.608, 0.418], [0.091, 0.86, 0.395], [-0.012, 0.966, -0.312], [-0.077, 0.811, -0.643], [-0.131, 0.051, -0.804], [-0.131, -0.051, -0.804], [-0.077, -0.811, -0.643], [-0.012, -0.966, -0.312], [0.091, -0.86, 0.395], [-0.048, -0.608, 0.418], [0.044, -0.151, 1.332]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.957, [[7.29, 3.783, 4.958], [12.105, 225.882, 113.954], [47.244, 4.538, 5.105], [0.149, 0.65, 0.749], [[0.07, 0.357, 0.872], [-0.133, 0.957, 0.393], [-0.12, 0.945, -0.313], [0.081, 0.451, -0.743], [0.081, -0.451, -0.743], [-0.12, -0.945, -0.313], [-0.133, -0.957, 0.393], [0.07, -0.357, 0.872]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.975, [[7.307, 5.255, 6.557], [0, 0.665, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.067, 0.374, 0.981], [-0.013, 0.953, 0.309], [0.148, 1.038, -0.605], [0.046, 0.455, -1.048], [0.046, -0.455, -1.048], [0.148, -1.038, -0.605], [-0.013, -0.953, 0.309], [0.067, -0.374, 0.981]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.969, [[12.897, 5.889, 6.915], [0, -16.612, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.007, 0.269, 1.027], [0.02, 0.937, 0.316], [-0.057, 0.849, -0.635], [0.001, 0.449, -0.834], [0.001, -0.449, -0.834], [-0.057, -0.849, -0.635], [0.02, -0.937, 0.316], [0.007, -0.269, 1.027]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.934, [[4.802, 3.798, 5.492], [0, 2.1, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.048, 0.464, 0.885], [0.021, 1.022, 0.08], [-0.055, 0.922, -0.645], [-0.099, 0.415, -0.922], [-0.099, -0.415, -0.922], [-0.055, -0.922, -0.645], [0.021, -1.022, 0.08], [0.048, -0.464, 0.885]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.175, [[13.31, 4.888, 7.777], [0, 23.108, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.026, 0.318, 0.92], [0.023, 0.858, 0.207], [0.039, 0.94, -0.533], [-0.042, 0.364, -1.004], [-0.042, -0.364, -1.004], [0.039, -0.94, -0.533], [0.023, -0.858, 0.207], [-0.026, -0.318, 0.92]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.143, [[7.618, 6.815, 7.213], [0, -8.62, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.098, 0.296, 1.044], [-0.089, 0.851, 0.313], [0.095, 0.952, -0.49], [0.186, 0.397, -1.139], [0.186, -0.397, -1.139], [0.095, -0.952, -0.49], [-0.089, -0.851, 0.313], [0.098, -0.296, 1.044]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.067, [[1.285, 2.391, 2.27], [0, 4.068, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.043, 0.538, 0.709], [-0.085, 0.904, 0.476], [0.043, 0.94, -0.301], [0.116, 0.484, -0.928], [0.116, -0.484, -0.928], [0.043, -0.94, -0.301], [-0.085, -0.904, 0.476], [-0.043, -0.538, 0.709]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.734, [[9.085, 25.88, 29.982], [0, 0.401, 0], [6.999, 7.999, 8.999], [0.201, 0.831, 0.749], [[0.021, 0.258, 0.808], [0.032, 0.935, 0.75], [-0.045, 1.078, 0.47], [-0.025, 0.794, 0.013], [0.033, 0.699, -0.969], [0.045, 0.356, -0.683], [0.045, -0.356, -0.683], [0.033, -0.699, -0.969], [-0.025, -0.794, 0.013], [-0.045, -1.078, 0.47], [0.032, -0.935, 0.75], [0.021, -0.258, 0.808]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[1.095, [[7.838, 4.374, 2.317], [8.946, 232.817, 121], [59.402, 3.492, 3.928], [0.149, 0.65, 0.749], [[0.048, 0.41, 1.014], [0.069, 0.897, 0.591], [-0.066, 0.861, -0.522], [-0.057, 0.417, -0.999], [-0.057, -0.417, -0.999], [-0.066, -0.861, -0.522], [0.069, -0.897, 0.591], [0.048, -0.41, 1.014]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.916, [[8.966, 5.422, 6.001], [0, 5.812, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.13, 0.466, 0.779], [-0.035, 1.079, 0.437], [-0.003, 0.921, -0.439], [-0.002, 0.392, -0.909], [-0.002, -0.392, -0.909], [-0.003, -0.921, -0.439], [-0.035, -1.079, 0.437], [-0.13, -0.466, 0.779]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.828, [[24.544, 5.606, 5.31], [0, -6.798, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.08, 0.419, 1.176], [-0.141, 1.097, 0.617], [0.003, 1.01, -0.41], [0.026, 0.305, -1.178], [0.026, -0.305, -1.178], [0.003, -1.01, -0.41], [-0.141, -1.097, 0.617], [0.08, -0.419, 1.176]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.931, [[5.033, 5.275, 5.385], [0, -5.503, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.004, 0.402, 0.687], [0.044, 0.933, 0.343], [0.012, 0.814, -0.128], [0.068, 0.362, -0.994], [0.068, -0.362, -0.994], [0.012, -0.814, -0.128], [0.044, -0.933, 0.343], [0.004, -0.402, 0.687]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.922, [[21.324, 5.626, 3.61], [0, 6.085, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.047, 0.432, 0.85], [-0.12, 0.942, 0.3], [-0.016, 0.83, -0.447], [0.003, 0.471, -0.948], [0.003, -0.471, -0.948], [-0.016, -0.83, -0.447], [-0.12, -0.942, 0.3], [-0.047, -0.432, 0.85]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.093, [[8.334, 4.502, 6.784], [0, 7.551, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.056, 0.362, 1.106], [-0.132, 1.077, 0.261], [0.089, 0.782, -0.396], [-0.006, 0.253, -0.693], [-0.006, -0.253, -0.693], [0.089, -0.782, -0.396], [-0.132, -1.077, 0.261], [-0.056, -0.362, 1.106]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.44, [[2.287, 2.041, 2.072], [0, -17.133, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.104, 0.319, 0.915], [0.034, 1.007, 0.218], [-0.058, 0.98, -0.402], [-0.02, 0.415, -0.735], [-0.02, -0.415, -0.735], [-0.058, -0.98, -0.402], [0.034, -1.007, 0.218], [-0.104, -0.319, 0.915]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999], [[[10.125, 12.779, 12.022], [-12.128, 2.878, undef]], [[[0, 0, 0], [0.1, 0.149, 0.1], [0.348, 0.349, 0.1], [0.65, 0.299, 0.063], [0.999, 0.1, 0]], [[0, 0, 0], [0.063, 0.149, -0.02], [0.244, 0.349, 0.037], [0.65, 0.299, 0.037], [0.999, 0.1, 0]]], [[[0, -0.127, 0], [0, 0.535, 0], [-0.145, 1.545, 0], [-0.319, 2.672, 0], [-0.527, 3.544, 0], [-0.539, 4.492, 0], [-0.445, 5.408, 0.003], [-0.236, 5.951, 0.011], [0.049, 7.09, 0.012]], [[0.354, -0.11, 0], [0.409, 0.604, 0], [1.081, 1.503, 0], [1.696, 2.579, 0], [2.057, 3.264, 0], [1.998, 4.047, 0], [1.791, 5.337, 0], [1.346, 5.956, 0], [0.714, 7.052, 0]]]]], [2.1, [[35.921, 28.97, 22.502], [0, -1.875, 0], [6.999, 7.999, 8.999], [0.238, 0.959, 0.749], [[0.106, 0.339, 0.794], [-0.005, 0.69, 0.825], [0.136, 0.973, 0.091], [0.052, 0.856, -0.232], [-0.032, 0.789, -0.591], [-0.132, 0.12, -0.742], [-0.132, -0.12, -0.742], [-0.032, -0.789, -0.591], [0.052, -0.856, -0.232], [0.136, -0.973, 0.091], [-0.005, -0.69, 0.825], [0.106, -0.339, 0.794]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[1.044, [[8.353, 5.473, 4.197], [5.703, 222.959, 99.678], [73.419, 2.286, 2.572], [0.149, 0.65, 0.749], [[0.123, 0.249, 1.204], [0.079, 1.002, 0.471], [0.041, 0.783, -0.558], [-0.08, 0.376, -0.894], [-0.08, -0.376, -0.894], [0.041, -0.783, -0.558], [0.079, -1.002, 0.471], [0.123, -0.249, 1.204]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.046, [[11.532, 4.015, 3.374], [0, 26.835, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.121, 0.391, 0.923], [-0.048, 1.005, 0.117], [-0.004, 0.817, -0.203], [0.078, 0.322, -0.804], [0.078, -0.322, -0.804], [-0.004, -0.817, -0.203], [-0.048, -1.005, 0.117], [0.121, -0.391, 0.923]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.009, [[38.443, 4.593, 5.261], [0, 8.057, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.038, 0.493, 1.034], [-0.067, 0.889, 0.264], [0.066, 0.819, -0.257], [0.029, 0.363, -1.07], [0.029, -0.363, -1.07], [0.066, -0.819, -0.257], [-0.067, -0.889, 0.264], [-0.038, -0.493, 1.034]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.978, [[4.795, 4.18, 3.494], [0, -16.455, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.098, 0.374, 0.649], [0.057, 0.76, 0.173], [0.048, 0.897, -0.271], [-0.119, 0.308, -0.858], [-0.119, -0.308, -0.858], [0.048, -0.897, -0.271], [0.057, -0.76, 0.173], [-0.098, -0.374, 0.649]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.087, [[39.638, 3.22, 3.785], [0, -11.682, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.104, 0.325, 0.702], [-0.01, 0.917, 0.546], [0.081, 0.835, -0.239], [-0.007, 0.341, -0.633], [-0.007, -0.341, -0.633], [0.081, -0.835, -0.239], [-0.01, -0.917, 0.546], [0.104, -0.325, 0.702]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.957, [[8.41, 5.73, 4.612], [0, -2.355, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.066, 0.394, 0.946], [0.085, 0.988, 0.175], [-0.12, 0.873, -0.611], [-0.011, 0.368, -1.091], [-0.011, -0.368, -1.091], [-0.12, -0.873, -0.611], [0.085, -0.988, 0.175], [0.066, -0.394, 0.946]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.851, [[3.32, 1.4, 2.045], [0, -13.623, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.015, 0.412, 0.708], [-0.057, 0.964, 0.415], [-0.019, 0.975, -0.498], [0.061, 0.462, -1.011], [0.061, -0.462, -1.011], [-0.019, -0.975, -0.498], [-0.057, -0.964, 0.415], [0.015, -0.412, 0.708]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999], [[[29.496, 55.306, 54.969], [3.367, -5.542, undef]], [[[0, 0, 0], [0.1, 0.149, 0.1], [0.348, 0.349, 0.1], [0.65, 0.299, 0.059], [0.999, 0.1, 0]], [[0, 0, 0], [0.059, 0.149, -0.019], [0.233, 0.349, 0.038], [0.65, 0.299, 0.038], [0.999, 0.1, 0]]], [[[0, -0.106, 0], [0, 0.591, 0], [-0.152, 1.664, 0], [-0.337, 2.518, 0], [-0.512, 3.39, 0], [-0.517, 4.398, 0], [-0.415, 5.45, 0.003], [-0.24, 6.393, 0.005], [0.041, 6.907, 0.012]], [[0.358, -0.106, 0], [0.412, 0.573, 0], [0.878, 1.607, 0], [1.408, 2.548, 0], [1.821, 3.334, 0], [1.857, 4.084, 0], [1.71, 5.32, 0], [1.373, 6.225, 0], [0.748, 7.052, 0]]]]], [2.428, [[41.424, 38.499, 33.91], [0, -0.011, 0], [6.999, 7.999, 8.999], [0.216, 0.881, 0.749], [[0.124, 0.133, 0.869], [0.159, 0.494, 0.369], [-0.179, 0.921, 0.33], [0.001, 0.849, -0.413], [-0.144, 0.582, -1.024], [-0.11, 0.195, -1.052], [-0.11, -0.195, -1.052], [-0.144, -0.582, -1.024], [0.001, -0.849, -0.413], [-0.179, -0.921, 0.33], [0.159, -0.494, 0.369], [0.124, -0.133, 0.869]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[1.356, [[11.828, 4.776, 4.689], [9.138, 216.617, 91.859], [33.857, 5.689, 6.4], [0.149, 0.65, 0.749], [[-0.205, 0.471, 0.986], [-0.003, 0.83, 0.301], [-0.092, 0.865, -0.261], [0.025, 0.383, -0.685], [0.025, -0.383, -0.685], [-0.092, -0.865, -0.261], [-0.003, -0.83, 0.301], [-0.205, -0.471, 0.986]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.514, [[12.433, 8.056, 3.887], [0, 20.515, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.04, 0.242, 1.118], [-0.058, 0.808, 0.015], [0.145, 1.044, -0.696], [-0.01, 0.301, -0.875], [-0.01, -0.301, -0.875], [0.145, -1.044, -0.696], [-0.058, -0.808, 0.015], [0.04, -0.242, 1.118]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.079, [[22.626, 3.867, 7.908], [0, -22.893, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.015, 0.465, 0.925], [0.075, 1.065, 0.464], [0.053, 1.067, -0.561], [-0.071, 0.529, -1.116], [-0.071, -0.529, -1.116], [0.053, -1.067, -0.561], [0.075, -1.065, 0.464], [0.015, -0.465, 0.925]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.192, [[9.176, 5.312, 10.161], [0, -24.793, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.101, 0.208, 1.22], [-0.112, 0.912, 0.217], [-0.08, 0.915, -0.193], [0.105, 0.354, -1.065], [0.105, -0.354, -1.065], [-0.08, -0.915, -0.193], [-0.112, -0.912, 0.217], [0.101, -0.208, 1.22]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.588, [[18.858, 3.368, 3.342], [0, 24.628, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.072, 0.274, 0.796], [-0.092, 0.811, 0.738], [0.034, 0.904, -0.116], [0.16, 0.201, -1.126], [0.16, -0.201, -1.126], [0.034, -0.904, -0.116], [-0.092, -0.811, 0.738], [0.072, -0.274, 0.796]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.142, [[12.38, 6.381, 9.962], [0, 4.243, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.043, 0.551, 0.6], [0.135, 0.86, 0.448], [-0.143, 1.086, -0.714], [-0.051, 0.401, -1.161], [-0.051, -0.401, -1.161], [-0.143, -1.086, -0.714], [0.135, -0.86, 0.448], [0.043, -0.551, 0.6]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.161, [[2.958, 2.282, 2.018], [0, -17.298, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.046, 0.271, 0.698], [-0.138, 0.821, 0.394], [0.057, 0.989, -0.514], [-0.122, 0.437, -0.929], [-0.122, -0.437, -0.929], [0.057, -0.989, -0.514], [-0.138, -0.821, 0.394], [0.046, -0.271, 0.698]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [2.353, [[45.465, 19.184, 28.74], [0, -11.582, 0], [6.999, 7.999, 8.999], [0.162, 0.693, 0.749], [[0.055, 0.039, 1.098], [-0.09, 0.76, 0.342], [0.072, 1.191, 0.441], [-0.017, 0.813, -0.131], [0.135, 0.579, -0.827], [-0.148, 0.38, -0.595], [-0.148, -0.38, -0.595], [0.135, -0.579, -0.827], [-0.017, -0.813, -0.131], [0.072, -1.191, 0.441], [-0.09, -0.76, 0.342], [0.055, -0.039, 1.098]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.274, [[1.485, 3.385, 2.671], [-7.616, 220.236, 83.654], [80.619, 1.667, 1.875], [0.149, 0.65, 0.75], [[0.056, 0.262, 1.031], [0.071, 0.75, 0.63], [-0.127, 1.093, -0.279], [-0.175, 0.445, -0.956], [-0.175, -0.445, -0.956], [-0.127, -1.093, -0.279], [0.071, -0.75, 0.63], [0.056, -0.262, 1.031]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.267, [[1.659, 2.021, 2.434], [0, 2.873, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[-0.085, 0.441, 1.003], [0.009, 1.036, 0.583], [0.019, 0.817, -0.368], [0.033, 0.459, -0.557], [0.033, -0.459, -0.557], [0.019, -0.817, -0.368], [0.009, -1.036, 0.583], [-0.085, -0.441, 1.003]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.389, [[1.774, 3.295, 1.88], [0, -6.52, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[0.086, 0.46, 0.826], [-0.153, 0.841, 0.69], [-0.011, 0.732, -0.488], [-0.054, 0.497, -1.026], [-0.054, -0.497, -1.026], [-0.011, -0.732, -0.488], [-0.153, -0.841, 0.69], [0.086, -0.46, 0.826]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.379, [[1.456, 2.655, 3.282], [0, -2.217, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[-0.105, 0.517, 0.974], [-0.035, 0.895, 0.065], [0.081, 0.829, -0.11], [-0.007, 0.346, -0.793], [-0.007, -0.346, -0.793], [0.081, -0.829, -0.11], [-0.035, -0.895, 0.065], [-0.105, -0.517, 0.974]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.245, [[3.014, 2.237, 3.077], [0, 7.5, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[-0.039, 0.365, 0.692], [0.029, 0.959, 0.354], [0.1, 0.803, -0.558], [0.025, 0.336, -0.825], [0.025, -0.336, -0.825], [0.1, -0.803, -0.558], [0.029, -0.959, 0.354], [-0.039, -0.365, 0.692]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.295, [[1.767, 3.468, 2.955], [0, 1.715, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[0.14, 0.401, 0.753], [0.085, 0.981, 0.538], [0.079, 0.951, -0.217], [0.052, 0.359, -1.269], [0.052, -0.359, -1.269], [0.079, -0.951, -0.217], [0.085, -0.981, 0.538], [0.14, -0.401, 0.753]], [0.999, 1.999, 3, 3.999, 4.999, 6]], [0.999, 0.999, 0.999]], [0.552, [[0.46, 1.513, 1.949], [0, -3.082, 0], [7, 7.999, 8.999], [0.149, 0.65, 0.75], [[-0.15, 0.554, 0.61], [0.021, 1.018, 0.287], [0.003, 0.96, -0.009], [0.063, 0.271, -1.03], [0.063, -0.271, -1.03], [0.003, -0.96, -0.009], [0.021, -1.018, 0.287], [-0.15, -0.554, 0.61]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [1.829, [[44.174, 41.468, 26.269], [0, -90.952, 0], [6.999, 7.999, 8.999], [0.234, 0.944, 0.749], [[0.065, 0.21, 0.969], [-0.021, 0.787, 1.044], [-0.068, 1.038, -0.051], [-0.116, 1.188, -0.691], [-0.158, 0.529, -0.393], [-0.048, 0.319, -1.253], [-0.048, -0.319, -1.253], [-0.158, -0.529, -0.393], [-0.116, -1.188, -0.691], [-0.068, -1.038, -0.051], [-0.021, -0.787, 1.044], [0.065, -0.21, 0.969]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.762, [[3.476, 6.386, 3.969], [9.378, 219.438, 77.212], [58.257, 3.59, 4.039], [0.149, 0.65, 0.749], [[-0.048, 0.375, 0.764], [0.132, 0.85, 0.427], [0.173, 0.884, -0.271], [0.117, 0.36, -0.976], [0.117, -0.36, -0.976], [0.173, -0.884, -0.271], [0.132, -0.85, 0.427], [-0.048, -0.375, 0.764]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.648, [[2.285, 3.303, 7.052], [0, -4.298, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.108, 0.366, 1.027], [0.134, 0.792, 0.516], [-0.049, 0.873, -0.301], [0.164, 0.245, -1.107], [0.164, -0.245, -1.107], [-0.049, -0.873, -0.301], [0.134, -0.792, 0.516], [-0.108, -0.366, 1.027]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.749, [[3.285, 2.817, 6.007], [0, -24.21, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.035, 0.349, 1.062], [-0.083, 0.706, 0.245], [0.072, 1.021, -0.484], [-0.106, 0.428, -0.744], [-0.106, -0.428, -0.744], [0.072, -1.021, -0.484], [-0.083, -0.706, 0.245], [-0.035, -0.349, 1.062]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.518, [[3.53, 6.925, 5.649], [0, -8.979, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.047, 0.304, 1.01], [0.156, 0.888, 0.341], [0.124, 0.873, -0.5], [0.085, 0.515, -0.688], [0.085, -0.515, -0.688], [0.124, -0.873, -0.5], [0.156, -0.888, 0.341], [0.047, -0.304, 1.01]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.838, [[2.214, 3.994, 4.708], [0, 23.211, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.083, 0.287, 1.02], [0.107, 0.927, 0.337], [0.019, 0.833, -0.235], [-0.029, 0.404, -0.597], [-0.029, -0.404, -0.597], [0.019, -0.833, -0.235], [0.107, -0.927, 0.337], [-0.083, -0.287, 1.02]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.804, [[3.116, 6.547, 3.848], [0, 8.39, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.141, 0.374, 0.978], [-0.014, 0.96, 0.668], [0.014, 0.931, -0.525], [-0.001, 0.43, -0.653], [-0.001, -0.43, -0.653], [0.014, -0.931, -0.525], [-0.014, -0.96, 0.668], [-0.141, -0.374, 0.978]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [2.061, [[0.996, 2.382, 2.132], [0, 0.854, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.035, 0.222, 0.843], [0.013, 0.986, 0.513], [-0.11, 0.945, -0.449], [0.145, 0.442, -0.738], [0.145, -0.442, -0.738], [-0.11, -0.945, -0.449], [0.013, -0.986, 0.513], [0.035, -0.222, 0.843]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]], [2.148, [[15.904, 6.859, 32.034], [0, 11.437, 0], [6.999, 7.999, 8.999], [0.18, 0.755, 0.749], [[0.168, 0.205, 1.161], [-0.164, 0.692, 0.379], [0.037, 1.071, 0.533], [0.011, 1.189, 0.116], [-0.106, 0.696, -0.345], [0.132, 0.199, -0.615], [0.132, -0.199, -0.615], [-0.106, -0.696, -0.345], [0.011, -1.189, 0.116], [0.037, -1.071, 0.533], [-0.164, -0.692, 0.379], [0.168, -0.205, 1.161]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [[0.662, [[2.874, 6.078, 4.796], [1.7, 217.235, 92.404], [59.684, 3.468, 3.901], [0.149, 0.65, 0.749], [[-0.038, 0.471, 0.904], [-0.043, 1.04, 0.562], [0.059, 0.885, -0.316], [-0.126, 0.502, -0.996], [-0.126, -0.502, -0.996], [0.059, -0.885, -0.316], [-0.043, -1.04, 0.562], [-0.038, -0.471, 0.904]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.618, [[2.332, 6.151, 3.137], [0, -1.49, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.142, 0.277, 0.879], [-0.001, 1.041, 0.389], [0.041, 0.903, -0.444], [-0.108, 0.329, -0.579], [-0.108, -0.329, -0.579], [0.041, -0.903, -0.444], [-0.001, -1.041, 0.389], [0.142, -0.277, 0.879]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.731, [[2.003, 4.767, 4.631], [0, -16.67, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.007, 0.318, 0.775], [-0.091, 0.975, 0.466], [0.056, 0.799, -0.244], [0.024, 0.361, -0.937], [0.024, -0.361, -0.937], [0.056, -0.799, -0.244], [-0.091, -0.975, 0.466], [-0.007, -0.318, 0.775]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.636, [[6.027, 2.485, 4.57], [0, 11.334, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.019, 0.404, 0.861], [-0.019, 0.975, 0.321], [-0.123, 0.95, -0.51], [-0.056, 0.257, -1.107], [-0.056, -0.257, -1.107], [-0.123, -0.95, -0.51], [-0.019, -0.975, 0.321], [0.019, -0.404, 0.861]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.723, [[5.434, 4.527, 4.709], [0, 23.156, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.032, 0.398, 0.704], [-0.046, 1.018, 0.352], [-0.069, 1.022, -0.315], [0.014, 0.267, -0.682], [0.014, -0.267, -0.682], [-0.069, -1.022, -0.315], [-0.046, -1.018, 0.352], [-0.032, -0.398, 0.704]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [0.598, [[2.081, 4.914, 4.753], [0, 5.214, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[0.008, 0.368, 0.912], [0.04, 0.977, 0.147], [-0.017, 0.766, -0.338], [0.059, 0.449, -1.233], [0.059, -0.449, -1.233], [-0.017, -0.766, -0.338], [0.04, -0.977, 0.147], [0.008, -0.368, 0.912]], [0.999, 1.999, 2.999, 3.999, 4.999, 5.999]], [0.999, 0.999, 0.999]], [1.646, [[0.523, 2.346, 2.215], [0, -6.157, 0], [6.999, 7.999, 8.999], [0.149, 0.65, 0.749], [[-0.04, 0.417, 0.85], [-0.031, 0.895, 0.206], [0.021, 0.966, -0.419], [0.193, 0.288, -0.787], [0.193, -0.288, -0.787], [0.021, -0.966, -0.419], [-0.031, -0.895, 0.206], [-0.04, -0.417, 0.85]], [undef, undef, undef, undef, undef, undef]], [0.999, 0.999, 0.999]]], [0.999, 0.999, 0.999]]]];
Parent2=1 ;


/* [Hidden] */


RING=12;
fork = [1, 1,1];

//echo(str("   wings=",wing,";   "));
xgrove = [0.15,0.65,0.75]; //[0.5,0.5,0.5];
logrove = [0.25,1,0.75]; //[0.5,0.5,0.5];
grove = [0.15,0.95,0.75]; //[0.5,0.5,0.5];
nogrove = [0,1,1]; //[0.5,0.5,0.5];
ring = [
  [0, 1, 1],
  [0, 0, 1.5], [0, -1, 1],
  [0, -1, -1],
  [0, 1, -1]
];
tex = [1,2,3,4,5,6]; //[["extparams"],["distmap -x,-y,-z,x,y,z"]];

//DNA = [base(), head(), ThoraxAbdomen()];
 DNA =deepmutate( [base(), head(), ThoraxAbdomen()],Mutate);
//DNA=Parent1;
for (x=[0:100:0]){
for (y=[0:100:0]){
translate([x*3.5,y*3.5,0])rotate([0,0,180+rnd(-0,0)])MakeBug(DNA);
}}
echo(roundlist(DNA,0.001));
//////////////////////MakeBug/////////////////////////////////////
module MakeBug(dna) {
    B = dna[0];
    Bm = flipring(B);
ufdna1=unfold(dna[1]);
ufdna2=unfold(dna[2]);
    H = populatelegs(populate(ufdna1));
    T = populatelegs(populate(ufdna2));

rotate( [0,0,180]) Ltrunk(Bm,H);
Ltrunk(B,T);

  }
  ///////////////////End of MakeBug /////////////////////////////////////////
module Ltrunk (state,T){
Points=trunk2mesh(state,T,0);
core=trunk2core(T);
*for(i=[0:len(Points)-1])   {
color("Black")translate(Points[i])text(str(i),size=1);
}

Faces=

[for(x=[0:(len(Points)-3)/RING],y=[0:RING-1])let(xx=x*RING)[
xx+y,
xx+(y+1)%RING,
xx+RING+(y+1)%RING
,
xx+RING+y
]];

trunk=  cc([Points,Faces],0);
//polyhedron(trunk[0],trunk[1]);
//trender(trunk);
hrender(trunk,core);
lT1=len(T)-1;
for(i=[0:max(0,lT1)]){

L=T[i][2];

wing=(T[i][4]);

if(wing!=undef){color([0.35,0.5/(i+1),0.15]+rndc()*(0.5/(i/10+1)))
translate(T[i][1][2])translate([0,0,T[i][1][0][2]*0.5]){
wingcv=sanitycheck(wing);
//echo(wingcv);
translate([0,-T[i][1][0][2]*0.5,0])Makewing(wingcv);

mirror([0,1,0])translate([0,-T[i][1][0][2]*0.5,0])Makewing(wing);
}
}
if(len(L)>1){
LPoints=trunk2mesh(ringscale(T[i][2][4],[0.5,0.5,0.5]),L,0);
LFaces=concat(
[for(ii=[0:max(0,len(LPoints)-3)])[min(len(LPoints)-1,max(0,ii)),min(len(LPoints)-1,max(0,ii+1)),min(len(LPoints)-1,max(0,ii+8))]],
[for(ii=[-6:max(-6,len(LPoints)-9)])[min(len(LPoints)-1,max(0,ii)),min(len(LPoints)-1,max(0,ii+8)),min(len(LPoints)-1,max(0,ii+7))]]);
append=i>len(T)-3? cc([LPoints,LFaces],1): ([LPoints,LFaces]);
 translate(T[i][1][2])rotate([0,i*3+90+T[i][1][1][1],0])rotate([L[0][1][1][0],0,L[0][1][1][2]])
//hrender(append);
trender(append);

//polyhedron(append[0],append[1]);
;
mirror([0,10]) translate(T[i][1][2])rotate([0,i*3+90+T[i][1][1][1],0])rotate([L[0][1][1][0],0,L[0][1][1][2]])
//hrender(append);
trender(append);

//polyhedron(append[0],append[1])
;
;
}



//echo(i,T[i][1]);
}}

module line(p1, p2,d=[1,1,1]) {
  hull() {
   translate(p1)  rotate([0,90+atan2( p2[0]-p1[0],p2[2]-p1[2] ),0])scale([min(d[1]*0.5,d[2]),d[1],d[2]])rotate([0,90,0])sphere(1,$fn=8);
     translate(p2) rotate([0, atan2(p2[0]-p1[0]),0],p2[2]-p1[2])scale([min(d[1]*0.75,d[2]),d[1]*0.75,d[2]]*0.75)rotate([0,90,0])sphere(1,$fn=8);
  }
}
function axflip(v)=[v[0],v[1],-v[2]];
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
function trunk2core(T,i=0)=i==len(T)-1?

let (grove=T[i][1][3])
let(tr1=T[i][1][2])
let(points=   concat([tr1],[tr1]))
points
:
let (grove=T[i][1][3])
let(tr1=T[i][1][2])
let(tr2=lerp(T[i][1][2],T[min(len(T)-1,i+1)][1][2],0.2))
let(tr3=lerp(T[i][1][2],T[min(len(T)-1,i+1)][1][2],grove[2]),
points= grove[1]<0.7?concat( [tr1],[tr2],[tr3],trunk2core(T,i+1)):concat( [tr1],trunk2core(T,i+1)))
points;
////////////////////////////////////////////////////////////
function trunk2mesh(state,T,i=-1)=let(ringo=mirring(T[i][1][4]))i==len(T)-1?
let (grove=T[i][1][3])
let(s=T[i][1][0])
let(r=lerp(T[min(len(T)-1,i+1)][1][1][1],T[i][1][1][1],0.5))
let(newring=ringtrans( ringrot(ringscale(ringo,s*grove[1]),r) ,T[i][1][2]),
points=concat( newring))
points
:
i==0? 
let(s=T[0][1][0])
let(newring=ringscale(ringo,axflip(s)),
points=concat(newring,trunk2mesh(state,T,i+1)))
points
:
let(s=T[i][1][0])
let (grove=T[i][1][3])
let(tr1=T[i][1][2])
let(tr2=lerp(T[i][1][2],T[min(len(T)-1,i+1)][1][2],0.2))
let(tr3=lerp(T[i][1][2],T[min(len(T)-1,i+1)][1][2],grove[2]))
let(r=lerp(T[min(len(T)-1,i+1)][1][1][1],T[i][1][1][1],0.5))
let(newring1=ringtrans( ringrot(ringscale(ringo,s*grove[1]),r) ,tr1))
let(newring=ringtrans( ringrot(ringscale(ringo,s),r) ,tr1))
let(newring2=ringtrans( ringrot(ringscale(ringo,s),r) ,tr2))
let(newring3=ringtrans( ringrot(ringscale(ringo,s),r) ,tr3),
points= grove[1]<0.7?concat( newring1,newring2,newring3,trunk2mesh(state,T,i+1)):concat( newring,trunk2mesh(state,T,i+1))
//concat( newring1,newring2,newring3,trunk2mesh(state,T,i+1))
)
points;



////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
///////////////////////////////// Unroll and Populate Full bodyMap
function flipring(B)= let(v=B[4])[B[0],B[1],B[2],B[3],[ for(i=[0:len(v)-1])[-v[i][0],v[i][1],v[i][2]] ],B[5]]; 
function populate(fdna,state=[ [0,0,0], [0,0,0], [0,0,0] ],i=0)=
let(l=len(fdna)-1,nextstate=popadd(state,fdna[i]))(i==l)?poppack(state,fdna[i]):concat(poppack(state,fdna[i]),populate(fdna,nextstate,i+1));
function populatelegs(f)=[
for(i=[0:len(f)-1])f[i][2]!=[]?[f[i][0],f[i][1],populate(f[i][2]),f[i][3],f[i][4]]:[f[i][0],f[i][1],f[i][2],f[i][3],f[i][4]] ]; 
function popadd(state,fdna)=(len(fdna)==0)?state:let(x=fdna[1][0][0],newdir=state[1]+fdna[1][1])[fdna[1][0],newdir,state[2]+[sin(newdir[1])*x,0,cos(newdir[1])*x]];

function poppack(state,fdna)= let(nextstate=popadd(state,fdna))[[fdna[0],
[nextstate[0],nextstate[1],nextstate[2],fdna[1][3],fdna[1][4],fdna[1][5]],fdna[2],fdna[3],fdna[4] ]]; 

function unfold(fdna)=concat(repete(fdna,0),repete(fdna,1),repete(fdna,2),repete(fdna,3),repete(fdna,4),repete(fdna,5),repete(fdna,6),repete(fdna,7),repete(fdna,8),repete(fdna,9),repete(fdna,10),repete(fdna,11),repete(fdna,12),repete(fdna,13),repete(fdna,14),repete(fdna,15));

function repete(v,i)= 
let(c=round(v[i][0])) 
c>0?
let(l=max(0,len(v)-1))
let(j=min(i+1,l))
[
 for(n=[1:c])[
v[i][0],
[
let(temp=lerp(v[i][1][0],v[j][1][0],n/c))

[v[i][1][0][0],temp[1],temp[2]], v[i][1][1]/c,
v[i][1][2],lerp(v[i][1][3],v[j][1][3],n/c),lerp(v[i][1][4],v[j][1][4],n/c),//ring lerp(v[i][1][5],v[j][1][5],n/c),
],
unfold(v[i][2]),//legs
v[i][3],
v[i][4]  //wings
]]:[];

/////////////////////// Defining Default Body Parts Function s
  function  eye1()=[
[1,[[1,0.1,0.1],[-65+rnd(-30,30),180+rnd(-30,30),rnd(10,30)],[0,0,0],nogrove,Xring(8,1,0),tex],fork],
[1,[   [1.1, 1, 1], [0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[ [3.03893, 7.97785, 7.97785] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[ [4.85528, 12.61057, 12.61057] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[ [4.85528, 12.61057, 12.61057] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork], 
[1,[  [3.03893, 8.97785, 8.97785],[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[  [0.1, 0.1, 0.1] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex], fork]];    
  function  eye2()=[
[1,[[1,0.11,0.11],[-65+rnd(-30,30),180+rnd(-30,30),rnd(10,30)],[0,0,0],nogrove,Xring(8,1,0),tex],fork],
[1,[   [1, 2, 2], [0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[ [3.03893, 7.97785*3 ,7.97785*3] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[0.5,[ [4.85528, 12.61057*3, 12.61057*3] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[0.5,[ [4.85528, 12.61057*3, 12.61057*3] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork], 
[1,[  [3.03893, 8.97785*3, 8.97785*3],[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex],fork],
[1,[  [0.1, 0.1, 0.1] ,[0,0,0],[7,8,9],nogrove,Xring(8,1,0),tex], fork]];  

function  ant1()=[
[1,[[5,5,5],[0+rnd(-10,50),180+rnd(10,50),rnd(50,150)],[100,0,0],xgrove,Xring(8),tex],fork],
[1,[[15,3,3], [0,30,0],[7,8,9],xgrove,Xring(8),tex],fork],
[1,[[16,2,2],[0,35,0],[7,8,9],xgrove,Xring(8),tex],fork],
[1,[[15, 2,2],[0,-15,0],[7,8,9],xgrove,Xring(8),tex],fork],
[2,[[6,2,2],[0,-45,0],[7,8,9],xgrove,Xring(8),tex],fork], 
[2,[[7,3,3],[0,-15,0],[7,8,9],xgrove,Xring(8),tex],fork],
[3,[[5,1,1],[0,-7,0],[7,8,9],xgrove,Xring(8),tex], fork]]; 
 function  ant2()=[
[1,[[5,5,5],[0+rnd(-10,50),rnd(170+rnd(10,50),190),rnd(50,150)],[100,0,0],xgrove,Xring(8),tex],fork],
[2,[[25,5,3], [0,30,0],[7,8,9],xgrove,Xring(8),tex],fork],
[2,[[26,5,2],[0,35,0],[7,8,9],xgrove,Xring(8),tex],fork],
[2,[[25, 3,2],[0,-15+rnd(-20,20),0],[7,8,9],xgrove,Xring(8),tex],fork],
[4,[[16,2,2],[0,-45+rnd(-20,20),0],[7,8,9],xgrove,Xring(8),tex],fork], 
[6,[[17,1,rnd(3,0.5)],[0,-15+rnd(-20,20),0],[7,8,9],xgrove,Xring(8),tex],fork],
[5,[[5,rnd(3,0.5),1],[0,-7,0],[7,8,9],xgrove,Xring(8),tex], fork]];  

function  mandible()=[
[1,[[10,5,0.1],[0+rnd(-20,20),180+45+rnd(-20,20),rnd(80,100)],[100,0,0],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[10,7,4], [0,15,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[5,10,3],[0,-15,0],[7,8,9],logrove,Xring(8,1,0.5),tex],fork],
[1,[[7,5,3],[0,-55,0],[7,8,9],logrove,Xring(8,1,0.5),tex],fork],
[1,[[5,10,3],[0,-35,0],[7,8,9],logrove,Xring(8,1,0.5),tex],fork], 
[1,[[4,5,3],[0,-25,0],[7,8,9],logrove,Xring(8,1,0.5),tex],fork],
[1,[[1,3,0.5 ],[0,-17,0],[7,8,9],grove,Xring(8,1,0.5),tex], fork]];
function  bna(ii=1)=let(i=(ii-5)*-7)[
[1,[[10,5,2],[0+rnd(-20,20),220+rnd(-20,20),90+i+rnd(-20,20)],[100,0,0],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[15,2,2], [0,55,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[60,2,2],[0,35,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[5, 2,2],[0,-35,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[1,[[60,2,2],[0,-45,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork], 
[rnd(2,5),[[10,rnd(5,8),1],[0,rnd(-30,55),0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[2,[[5,rnd(3,0.5),rnd(3,0.5)],[0,-17,0],[7,8,9],xgrove,Xring(8,1,0.5),tex], fork]];


function bna2(ii=1)=let(i=(ii-5)*-7)[
[0,[[0,1,1],[0+rnd(-20,20),220+i+rnd(-20,20),90+i+rnd(-20,20)],[100,0,0],xgrove,Xring(8,1,0.5),tex],fork],
[0,[[0,1, 1],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[0,[[0,1,1],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[0,[[0,1,1],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[0,[[0,1,1],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork], 
[0,[[0,1,1],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[0,[[0,rnd(3,0.5),rnd(3,0.5)],[0,0,0],[7,8,9],xgrove,Xring(8,1,0.5),tex], fork]];
function bna3(ii=1)=let(i=(ii-5)*-7)[
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[i+rnd(-20,20),220+rnd(-20,20),90+i+rnd(-20,20)],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[0,rnd(-30,30),0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[0,rnd(-60,-30),0],[7,8,9],xgrove,Xring(8,1,0.5),tex], fork],
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[0,rnd(-30,30),0],[7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[0,rnd(30,60),0], [7,8,9],xgrove,Xring(8,1,0.5),tex],fork],
[rnd(2),[[rnd(3,15),rnd(3,15),rnd(3,15)],[0,rnd(-30,30),0],[7,8,9],xgrove,Xring(8,1,0.5),tex], fork],
[rnd(8),[[rnd(3,0.5),rnd(3,2),rnd(3,2)],[0,rnd(-30,30),0],[7,8,9],xgrove,Xring(8,1,0.5),Xring(8,1,0.5),tex],fork]]; 
function ThoraxAbdomen()=lerp(rndTA(),[
[1,[[5,6,6],[0,-90,0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna2(1),bna3(1),rnd()),fork ],
[1,[[2,5, 8],[0,5,0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna(2),bna3(2),rnd()),fork,wingmix(1)],
[1,[[20,20,30],[0,-10,0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex], lerp(bna(3),bna3(3),rnd()),fork,wingmix(1)],
[1,[[20,24,28],[0,-15,0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna(4),bna3(4),rnd()),fork ],
[1,[[20,19,19],[0,rnd(-15,15),0], [7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna2(5),bna3(5),rnd(0,0.1)),fork ],
[3,[[17,18,8],[0,rnd(-50,50),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex], lerp(bna2(6),bna3(6),rnd(0,0.1)),fork ],
[3,[[20,1,1],[0,rnd(-25,25),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna2(7),bna3(7),rnd(0,0.1)),fork ]],rnd(1,1));



function head()=lerp(hrndTA(),[
[1,[[1,6,6],[0,-90,0],[7,8,9],logrove,Xring(RING,1,0.3),tex],bna2(1),fork],
[1,[[4,8,8],[0,-15,0],[7, 8,9],logrove,Xring(RING,1,0.3),tex],bna2(1),fork],
[1,[[8,12,12],[0,35,0],[7,8,9],logrove,Xring(RING,1,0.3),tex],lerp(mandible(),bna2(1),rnd(0,0.5)),fork],
[1,[[10, 12,12],[0,35,0],[7,8,9],logrove,Xring(RING,1,0.3),tex],lerp(mandible(),bna2(1),rnd(0,0.5)),fork],
[1,[[10,12,13],[0,25,0],[7,8,9],logrove,Xring(RING,1,0.3),tex], lerp(ant2(),ant1(),rnd()),fork],
[1,[[3,15,15],[0,45,0],[7,8,9],logrove,Xring(RING,1,0.3),tex],lerp(eye2(),eye1(),1),fork], 
[1,[[3,2,2],[0,0,0],[7,8,9],xgrove,Xring(RING,1,0.3),tex],lerp(bna2(1),bna2(1),rnd()),fork]],rnd(1,0.9)); 


function base()=[[10,10,10], [0,-90,0],[0,0,0],grove,revXring(RING,1,0.3),tex];


function rndTA()=[
[rnd(4),[[rnd(1,1),6,6],[0,-90,0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(1),lerp(bna2(1),bna(1),rnd()),rnd()),fork,],
[rnd(4),[[rnd(3,60),rnd(3,60), rnd(3,60)],[0,rnd(-3,3),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(),lerp(bna2(2),bna(2),rnd()),rnd()),fork,lerp(wing3(),wingmix(),rnd())],
[rnd(4),[[rnd(3,60),rnd(3,60), rnd(3,60)],[0,rnd(-3,3),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex], lerp(bna3(3),lerp(bna2(3),bna(3),rnd()),rnd()),fork,lerp(wing3(),wingmix(),rnd())],
[rnd(5),[[rnd(3,60),rnd(3,60), rnd(3,60)],[0,rnd(-10,10),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(4),lerp(bna2(4),bna(4),rnd()),rnd()),fork],
[rnd(6),[[rnd(3,60),rnd(3,60), rnd(3,60)],[0,rnd(-30,30),0], [7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(6),lerp(bna2(6),bna3(6),rnd(0.2)),rnd(0.8)),fork],
[rnd(4),[[rnd(3,60),rnd(3,60), rnd(3,60)],[0,rnd(-200,60),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(6),lerp(bna2(6),bna3(6),rnd(0.2)),rnd(0.8)),fork],
[rnd(4),[[rnd(3,20),rnd(3,10), rnd(3,60)],[0,rnd(-60,60),0],[7,8,9],lerp(xgrove,logrove,rnd()),Xring(RING,1,0.5),tex],lerp(bna3(6),lerp(bna2(6),bna3(6),rnd(0.2)),rnd(0.8)),fork]];
 function hrndTA()=[
[rnd(1),[[rnd(1,1),6,6],[0,-90,0],[7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(bna3(),lerp(bna2(),bna(),rnd()),rnd()),fork],
[rnd(3),[[rnd(3,30),rnd(3,60), rnd(3,60)],[0,rnd(-30,30),0],[7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(mandible(),bna2(),rnd()),fork],
[rnd(3),[[rnd(3,30),rnd(3,60), rnd(3,60)],[0,rnd(-30,30),0],[7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(mandible(),bna2(),rnd()),fork],
[rnd(2),[[rnd(3,30),rnd(3,60), rnd(3,60)],[0,rnd(-30,30),0],[7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(bna3(),lerp(bna2(),bna(),rnd()),rnd()),fork],
[rnd(4),[[rnd(3,30),rnd(3,60), rnd(3,60)],[0,rnd(-30,30),0], [7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(ant1(),lerp(ant2(),bna(),rnd()),rnd()),fork],
[rnd(3),[[rnd(3,30),rnd(3,60), rnd(3,60)],[0,rnd(-200,60),0],[7,8,9],logrove,Xring(RING,1,0.5),tex], lerp(ant1(),lerp(eye1(),eye2(),0),1),fork],
[rnd(2),[[rnd(8,10),rnd(5,7), rnd(5,7)],[0,rnd(-60,60),0],[7,8,9],logrove,Xring(RING,1,0.5),tex],lerp(eye2(),eye1(),rnd()),fork]]; 
function wingmix(i)=(lerp(wing1(i),wing2(i),rnd()));


module Makewing(wings) {
  ////////////////////////////////module wing(wings) ///////////////////////////////////
  ///////////////////////////////////////////////////////////////////
  overskin = concat([
      let (ws = wings[2], wp = wings[1], p1 = ws[0][0], p2 = ws[1][0], d = len3(p1 - p2))[
        for (j = [0: len(wings[1][0]) - 1])[lerp(p1, p2, wp[0][j][0])[0], lerp(p1, p2, wp[0][j][0])[1], wp[0][j][2] * d*4]]
    ],
[
      let (ws = wings[2], wp = wings[1], p1 = ws[0][1], p2 = ws[1][1], d = len3(p1 - p2))[
        for (j = [0: len(wings[1][0]) - 1])[lerp(p1, p2, wp[0][j][0])[0], lerp(p1, p2, wp[0][j][0])[1], wp[0][j][2] * d*4]]
    ],
    //mid
    [
      for (i = [2: len(wings[2][0]) - 2]) let (ws = wings[2], wp = wings[1], p1 = ws[0][i], p2 = ws[1][i], d = len3(p1 - p2))[
        for (j = [0: len(wings[1][0]) - 1])[lerp(p1, p2, wp[0][j][0])[0], lerp(p1, p2, wp[0][j][0])[1] + wp[0][j][1] * d, lerp(p1, p2, wp[0][j][0])[2] + wp[0][j][2] * d]]
    ], [
      let (i = len(wings[2][0]) - 1, ws = wings[2], wp = wings[1], p1 = ws[0][i], p2 = ws[1][i], d = len3(p1 - p2))[
        for (j = [0: len(wings[1][0]) - 1])[lerp(p1, p2, wp[0][j][0])[0], lerp(p1, p2, wp[0][j][0])[1] + wp[0][j][1] * d, lerp(p1, p2, wp[0][j][0])[2]]]
    ]);
 ////////////////////////////////module wing(wings) ///////////////////////////////////
 ///////////////////////////////////////////////////////////////////
  underskin = concat([
      let (ws = wings[2], wp = wings[1], p1 = ws[0][0], p2 = ws[1][0], d = len3(p1 - p2))[
        for (j = [0: len(wp[1]) - 1])[lerp(p1, p2, wp[1][j][0])[0], lerp(p1, p2, wp[1][j][0])[1], -wp[0][j][2] * d*4]]
    ],
[
      let (ws = wings[2], wp = wings[1], p1 = ws[0][1], p2 = ws[1][1], d = len3(p1 - p2))[
        for (j = [0: len(wp[1]) - 1])[lerp(p1, p2, wp[1][j][0])[0], lerp(p1, p2, wp[1][j][0])[1], -wp[0][j][2] * d*4]]
    ],

    //mid
    [
      for (i = [2: len(wings[2][0]) - 2]) let (ws = wings[2], wp = wings[1], p1 = ws[0][i], p2 = ws[1][i], d = len3(p1 - p2))[
        for (j = [0: len(wp[1]) - 1])[lerp(p1, p2, wp[1][j][0])[0], lerp(p1, p2, wp[1][j][0])[1] + wp[1][j][1] * d, lerp(p1, p2, wp[1][j][0])[2] + wp[1][j][2] * d]]
    ], [
      let (i = len(wings[2][0]) - 1, ws = wings[2], wp = wings[1], p1 = ws[0][i], p2 = ws[1][i], d = len3(p1 - p2))[
        for (j = [0: len(wings[1][1]) - 1])[lerp(p1, p2, wp[0][j][0])[0], lerp(p1, p2, wp[0][j][0])[1] + wp[0][j][1] * d, lerp(p1, p2, wp[0][j][0])[2]]]
    ]);
  ////////////////////////////////module wing(wings) ///////////////////////////////////
  ///////////////////////////////////////////////////////////////////
  rotate([wings[0][1][0],0,0])rotate([0,wings[0][1][1],0])rotate([0,0,wings[0][1][2]])rotate([-45,0,0]) rotate([0,0,180])scale(wings[0][0]) {union(){
    for (i = [0: len(overskin) - 2]) {
      wingringbridge(overskin[i], overskin[i + 1]);
   color("Red")   wingringbridge(underskin[i + 1],underskin[i]);
    }

    polyhedron(overskin[0], [
      [
        for (i = [0: len(overskin[0]) - 1]) i
      ]
    ]);
    polyhedron(underskin[0], [
      [
        for (i = [0: len(underskin[0]) - 1]) (len(underskin[0]) - 1)-i
      ]
    ]);}
  }
  module wingringbridge(r1, r2) {
    n = len(r1);
    
  for (i = [0: 1])
{ 
polyhedron([r1[i],r2[i],r2[i+1],r1[i+1] ],[[0,1,3],[1,2,3]]);
}
 for (i = [2: n - 2])
{ 
polyhedron([r1[i],r2[i],r2[i+1],r1[i+1] ],[[0,1,2],[0,2,3]]);
}
  };

  /////////////end of/module wing(wings)///////////////////////////////////
}


//////////////////////// Specilaty Wing Functions  /////////////////
/*definedefaultwing1*/
function wing1(i=0)=([[[23.215,20.95,20.95],[-60+rnd(-10,10),20+rnd(-10,10),120+rnd(-10,10)]],

[[[0,0,0],[0.1,0.15,0.1],[0.349,0.35,0.1],[0.65,0.3,0.1],[1,0.1,0]],
[[0,0,0],[0.1,0.15,-0.032],[0.349,0.35,0.032],[0.65,0.3,0.03264],[1,0.1,0]]],

deepmutate([[[0,-0.2,0],[0,0.7,0],[-0.059375,1.5875,0],[-0.2125,2.50619,0],[-0.412438,3.44975,0],[-0.49975,4.40587,0.003125],[-0.384,5.38413,0.015625],[-0.1185,6.38744,0.034375],[0.2,7.4,0.05]],[[0.45,-0.2,0],[0.55,0.7,0],[1.69687,0.98125,0],[2.62188,1.55625,0],[3.16875,2.41875,0],[3.35625,3.43125,0],[3.22187,4.5875,0],[2.3375,5.93125,0],[0.5,7.4,0]]],0.3)]);
/*//definedefaultwing2*/
function wing2(i=0)=let(m=rnd(5,25))sanitycheck([[[rnd(1,6)*m,rnd(1,6)*m,rnd(1,6)*m],[40 +rnd(-10,10),-20+rnd(-10,10),i+rnd(-10,10)]],[[[0,0,0],[0.1,0.15,0.1],[0.349,0.35,0.1],[0.65,0.3,0.05],[1,0.1,0]],[[0,0,0],[0.05,0.15,-0.02],[0.2049,0.35,0.05],[0.65,0.3,0.05],[1,0.05,0]]],[[[0,-0.089,0],[0,0.54,0],[-0.179,1.619,0],[-0.359,2.609,0],[-0.54,3.419,0],[-0.54,4.32,0],[-0.449,5.219,0],[-0.27,6.209,0],[0,7.199,0]],[[0.359,-0.089,0],[0.359,0.54,0],[0.719,1.709,0],[1.289,2.879,0],[1.349,3.509,0],[1.439,4.229,0],[1.349,5.219,0],[1.169,6.209,0],[0.809,7.199,0]]]]);
/*//definedefaultwing3*/
function wing3(i=0)=let(m=40)sanitycheck([[[0.1,0.1,0.1],[0,0,-i]],[[[0,0,0],[0.1,0.15,0.1],[0.349,0.35,0.1],[0.65,0.3,0.05],[1,0.1,0]],[[0,0,0],[0.05,0.15,-0.02],[0.2049,0.35,0.05],[0.65,0.3,0.05],[1,0.05,0]]],[[[0,-0.089,0],[0,0.54,0],[-0.179,1.619,0],[-0.359,2.609,0],[-0.54,3.419,0],[-0.54,4.32,0],[-0.449,5.219,0],[-0.27,6.209,0],[0,7.199,0]],[[0.359,-0.089,0],[0.359,0.54,0],[0.719,1.709,0],[1.289,2.879,0],[1.349,3.509,0],[1.439,4.229,0],[1.349,5.219,0],[1.169,6.209,0],[0.809,7.199,0]]]]);
/*/blurlengthprofile*/
function blur(inwing,c=1)=c<=0?inwing:let(wing=blur(inwing,c-1))[wing[0],wing[1],
[concat([wing[2][0][0]],[wing[2][0][1]],[for(i=[2:len(wing[2][0])-2])(wing[2][0][max(i-1,0)]*0.5+wing[2][0][i]+wing[2][0][min(i+1,len(wing[2][0])-1)]*0.5)/2],[wing[2][0][len(wing[2][0])-1]]),concat([wing[2][1][0]],[wing[2][1][1]],[for(i=[2:len(wing[2][1])-2])(wing[2][1][max(i-1,0)]*0.5+wing[2][1][i]+wing[2][1][min(i+1,len(wing[2][1])-1)]*0.5)/2],[wing[2][1][len(wing[2][1])-1]])]];
/*/randsvector*0.1inZ*/
function w3rnd(c)=[rands(-1,1,1)[0]*c,rands(-1,1,1)[0]*c*0.1,rands(-1,1,1)[0]]*c;/*/checkcross-profilesounderskinislowerthaoverskin*/function 

sanitycheck(v)=[v[0],[v[1][0],[let(l=len(v[1][1])-1)

for(i=[0:l])

[i==0||i==l?v[1][0][i][0]:v[1][1][i][0],i==0||i==l?v[1][0][i][1]:

v[1][1][i][1],i==0||i==l?v[1][0][i][2]:min(v[1][1][i][2],v[1][0][i][2])*0.8]]],v[2]];/*roundeveryiteminanestedlisttoselectedprecition*/

function roundlist(v,r=1)=len(v)==undef?v-(v%r):len(v)==0?[]:[for(i=[0:len(v)-1])roundlist(v[i],r)];/*multiplyeveryiteminanestedlistbyselecteddeviance*/

function deepmutate(v,r=0.3)=len(v)==undef?v*rnd(1-r,1+r):len(v)==0?[]:[for(i=[0:len(v)-1])deepmutate(v[i],r)];

///////////////// Common functions //////////////////////////////

/////////////////////////////////////Common

function  intrnd(a = 0, b = 1) = round((rands(min(a, b), max(a, b), 1)[0]));
function  rndc() = [rands(0, 1, 1)[0], rands(0, 1, 1)[0], rands(0, 1, 1)[0]];
function lerp(start, end, bias) = (end * bias + start * (1 - bias));
function len3(v) = len(v) == 2 ? sqrt(pow(v[0], 2) + pow(v[1], 2)) : sqrt(pow(v[0], 2) + pow(v[1], 2) + pow(v[2], 2));
function rnd(a = 0, b = 1) = (rands(min(a, b), max(a, b), 1)[0]);
function rndR()=[rands(0,360,1)[0],rands(0,360,1)[1],rands(0,360,1)[0]];

function ringtrans(v, t) = [
  for (i = [0: len(v) - 1])
    [
      v[i][0] + t[0],
      v[i][1] + t[1],
      v[i][2] + t[2]
    ]
];
function Xring(x = 8,r=0.7,kaos=0.05) = mirring([  for (i = [(360 / x) * 0.5: 360 / x: 359])[0, sin(i)*r,  cos(i)*r]+v3rnd(kaos)]);
function revXring(x = 8,r=1,) = [  for (i = [359: -360 / x: (360 / x) * 0.5])[0, sin(i)*r,  cos(i)*r]];
function ringrot(r = [
  [0, 0, 0]
], v) = [
  for (i = [0: len(r) - 1]) let (inx = r[i][0], iny = r[i][1], inz = r[i][2])[
    inx * sin(v) - inz * cos(v),
    iny,
    inx * cos(v) + inz * sin(v)
  ]
];

function ringscale(v, s) = [
  for (i = [0: len(v) - 1])
    [
      v[i][0] * s[0],
      v[i][1] *s[1],
      v[i][2] * s[2]
    ]
];
function mirring(ring) =
let (n = floor((len(ring) - 1) / 2))

concat(
  [
    for (i = [0: n]) ring[i]
  ], [
    for (i = [0: n])[ring[n - i][0], -ring[n - i][1], ring[n - i][2]]
  ]
);
function avrg(v) = sumv(v, len(v) - 1) / len(v);

function sumv(v, i, s = 0) = (i == s ||i==undef? v[i] : v[i] + sumv(v, i - 1, s));




module trender(t){C0=(un(rndc())+[2,0,0]);C1=(un(rndc())+[2,2,0]);C2=(un(rndc())+[0,2,2]);for(i=[0:max(0,len(t[1])-1)]){ n=un(p2n(t[0][t[1][i][0]],t[0][t[1][i][1]],t[0][t[1][i][2]]));color(un((C0*abs(n[0])+C1*abs(n[1])+C2*abs(n[2])+[1,1,1]*abs(n[2]))/4))polyhedron(t[0],[t[1][i]]);}}

module hrender(t,core){
points=concat(t[0],core);
cl=len(core);
tl=max(0,len(t[1]));
pl=len(t[0]);
npl=len(points)-1;
C0=(un(rndc())+[2,0,0]);C1=(un(rndc())+[2,2,0]);C2=(un(rndc())+[0,2,2]);

for(i=[0:tl-1-RING]){ n=un(p2n(t[0][t[1][i][0]],t[0][t[1][i][1]],t[0][t[1][i][2]]));
first=min(cl-1,max(1,ceil((cl/tl)*i)-1));
last=min(cl-1,max(1,ceil((cl/tl)*i)));
clip=[
concat(t[1][i][0],t[1][i][1],[min(npl,first+pl)] ),
concat(t[1][i][1],t[1][i][2],[min(npl,first+pl)] ),
concat(t[1][i][2],t[1][i][3],[min(npl,first+pl)] ),
concat(t[1][i][3],t[1][i][0],[min(npl,first+pl)] ),
concat(t[1][i][0],t[1][i][1], [min(npl,last+pl)]),
concat(t[1][i][1],t[1][i][2], [min(npl,last+pl)]),
concat(t[1][i][2],t[1][i][3], [min(npl,last+pl)]),
concat(t[1][i][3],t[1][i][0], [min(npl,last+pl)]),
[t[1][i][0],t[1][i][1],t[1][i][2]],
[t[1][i][0],t[1][i][1],t[1][i][3]]
];
//echo (pl+cl,clip);
color(un((C0*abs(n[0])+C1*abs(n[1])+C2*abs(n[2])+[1,1,1]*abs(n[2]))/4))

hull(){polyhedron(points,clip);}
;}}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function cc(V,n=1,curve=0.61803398875)=n<=0?V:n==1?let(w=V)let(ed=cccheck(ccQS (ccQS (ccQS (ccQS (ccde(w[1],len(w[0])-1),2),1),0),1)))let(nf=ccnf(ed))ccflip([ccnv(w,nf,curve),nf]):let(w=cc(V,n-1,curve))let(ed=cccheck(ccQS (ccQS (ccQS (ccQS (ccde(w[1],len(w[0])-1),2),1),0),1)))let(nf=ccnf(ed))ccflip([ccnv(w,nf,curve),nf]);
function ccnv(v,nf,curve)=let(nv=[for(i=[0:len(v[1])-1])(v[0][v[1][i][0]]+v[0][v[1][i][1]]+v[0][v[1][i][2]])/3])let(sfv=[for(i=[0:len(v[0])-1])avrg(ccfind(i,v[1],nv))])concat(lerp(v[0],sfv,curve),nv);
function ccnf(hf)=[for(i=[0:1:len(hf)-1])(i%2)==0?[hf[i][4],hf[(i+1)%len(hf)][2],hf[i][2]]:[hf[i][4],hf[(i-1)%len(hf)][2],hf[i][2]]];
function ccde(faces,points)=let(l=len(faces)-1) [for(i=[0:l])  let(f=faces[i])   for(j=[0:len(f)-1])     let(p=f[j],q=f[(j+1)%len(f)])       [min(p,q),max(p,q),i+points+1,p,q] //noduplicates 
];
function cccheck(ed)=concat([for(i=[0:len(ed)-1])if((ed[i][0]==ed[i-1][0]&&ed[i][1]==ed[i-1][1])||(ed[i][0]==ed[i+1][0]&&ed[i][1]==ed[i+1][1]))ed[i]]);
function ccfind(lookfor,faces,nv)=   [for(i=[0:len(faces)-1])if(faces[i][0]==lookfor||faces[i][1]==lookfor||faces[i][2]==lookfor)nv[i]];
function ccQS (arr,o)=!(len(arr)>0)?[]:let(  pivot =arr[floor(len(arr)/2)],  lesser =[for(y=arr)if(y[o] <pivot[o])y],  equal =[for(y=arr)if(y[o]==pivot[o])y],  greater=[for(y=arr)if(y[o] >pivot[o])y])concat(  ccQS (lesser,o),equal,ccQS (greater,o));
function wave(w,a=1,b=1)=[[for(i=[0:len(w[0])-1])let(x=w[0][i][0],y=w[0][i][1],z=w[0][i][2])w[0][i]+[sin((y+z)*b)*a,sin((z+x)*b)*a,sin((x+y)*b)*a]],w[1]];
function ccweld(v)=let(data=v[0])[v[0],[for(i=[0:len(v[1])-1])let(index1=v[1][i][0],index2=v[1][i][1],index3=v[1][i][2])concat(search(data[index1][0],data),search(data[index2][0],data),search(data[index3][0],data,1))]];
function ccflip(w)=[w[0],[for(i=[0:len(w[1])-1])[w[1][i][0],w[1][i][2],w[1][i][1]]]];
///////////////////////////commonfunction s/////////////////////////////
function un(v)=v/max(len3(v),0.000001)*1;
function p2n(pa,pb,pc)=
let(u=pa-pb,v=pa-pc)un([u[1]*v[2]-u[2]*v[1],u[2]*v[0]-u[0]*v[2],u[0]*v[1]-u[1]*v[0]]);
function avrg(v)=sumv(v,max(0,len(v)-1))/len(v);
function lerp(start,end,bias)=(end*bias+start*(1-bias));
function len3(v)=len(v)==2?sqrt(pow(v[0],2)+pow(v[1],2)):sqrt(pow(v[0],2)+pow(v[1],2)+pow(v[2],2));
function rnd(a=0,b=1)=(rands(min(a,b),max(a,b),1)[0]);
function rndc()=[rands(0,1,1)[0],rands(0,1,1)[0],rands(0,1,1)[0]];
function v3rnd(c=1)=[rands(-1,1,1)[0]*c,rands(-1,1,1)[0]*c,rands(-1,1,1)[0]]*c;
function roundlist(v,r=1)=len(v)==undef?v-(v%r):len(v)==0?[]:[for(i=[0:len(v)-1])roundlist(v[i],r)];
function limlist(v,r=1)= [for(i=[0:len(v)-1])[v[i][0],v[i][1],v[i][2]]];