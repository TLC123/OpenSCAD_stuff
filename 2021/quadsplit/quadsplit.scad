p=-[[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[0,0]];
for(i=[0:len(p)-1])translate(p[i]){
    echo(p[i]);
    rotate($vpr)linear_extrude(.01)text(str(i),size=.1);
    }
    truth=[true,false,true,false];
    
    i=bitMaskToValue(truth);
    echo(i, truth)
polyhedron(p,quadtable(i));
    
    
    function quadtable(i)=
[
[[0,2,4,6]],//0
[[0,1,8,6],[1,2,4,8],[4,6,8]],//1
[[2,3,8,0],[3,4,6,8],[0,8,6]],//2
[[1,2,3,8],[3,4,6,8],[0,1,8,6]],//3
[[5,6,0,8],[2,4,5,8],[0,2,8]],//4
[[0,1,5,6],[1,2,4,5]],//5
[[3,4,5,8],[0,2,3,8],[0,8,5,6]],//6
[[0,1,5,6],[1,3,4,5],[1,2,3]],//7
[[4,6,7,8],[0,2,8,7],[2,4,8]],//8
[[0,1,8,7],[1,2,4,8],[4,6,7,8]],//9
[[0,2,3,7],[3,4,6,7]],//10
[[3,4,6,7],[1,2,3,7],[0,1,7]],//11
[[5,6,7,8],[0,2,8,7],[2,4,5,8]],//12
[[2,4,5,1],[0,1,5,7],[5,6,7]],//13
[[0,2,3,7],[7,3,5,6],[3,4,5]],//14
[[7,0,1,8],[1,2,3,8],[3,4,5,8],[5,6,7,8]],//15
][i];
function bitMaskToValue(v=[0])= is_undef(v[0])?0:
 [for(j=v)1]* [for (i=[0:max(0,len(v)-1)]) toBit(v[i])*pow(2,i)] ;
function toBit(i) =is_bool(i)? (i?1:0):max(0,sign(i));



